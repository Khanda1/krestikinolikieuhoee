import telebot
from telebot import types
import random
import time
import threading


TOKEN = '7866406937:AAGoZKzJmnF3DOI4r5T8nVg6_9T_RDhjOPo'
bot = telebot.TeleBot(TOKEN)


games = {}

user_stats = {}


def create_keyboard(board):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    for i, cell in enumerate(board):
        buttons.append(types.InlineKeyboardButton(text=cell, callback_data=f'move_{i}'))
    buttons.append(types.InlineKeyboardButton(text="üõë –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏–≥—Ä—É", callback_data='stop_game'))
    keyboard.add(*buttons)
    return keyboard


def check_winner(board):
    win_combinations = [
        (0, 1, 2), (3, 4, 5), (6, 7, 8),
        (0, 3, 6), (1, 4, 7), (2, 5, 8),
        (0, 4, 8), (2, 4, 6)
    ]
    for a, b, c in win_combinations:
        if board[a] == board[b] == board[c] and board[a] != ' ':
            return board[a]
    if ' ' not in board:
        return 'draw'
    return None


def start_new_game(chat_id, user_id):
    games[chat_id] = {
        'board': [' '] * 9,
        'player_turn': '‚ùå',
        'player': user_id,
        'status': 'playing',
        'message_id': None,
        'welcome_message_id': None,
        'winner_message_sent': False,
    }
    return "üéÆ –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢–≤–æ–π —Ö–æ–¥ - ‚ùå"


def delete_old_messages(chat_id):
    if chat_id in games:
        game = games[chat_id]
        if game['message_id']:
            try:
                bot.delete_message(chat_id, game['message_id'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            game['message_id'] = None


def clear_chat_messages(chat_id):
    try:
        while True:
            try:

                last_message = bot.get_chat_history(chat_id, limit=1)[0]
            except Exception:

                break

            last_message_id = last_message.message_id


            for i in range(1, last_message_id + 1):
                try:
                    bot.delete_message(chat_id, i)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                time.sleep(0.05)


            break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


def update_board_message(chat_id):
    delete_old_messages(chat_id)
    if chat_id not in games:
        return
    game = games[chat_id]
    board = game['board']
    keyboard = create_keyboard(board)

    winner = check_winner(board)
    if winner:
        if winner == 'draw':
            text = "ü§ù –ù–∏—á—å—è! –•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!"
        else:
            text = f"üéâ –ü–æ–±–µ–¥–∏–ª {winner}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ"
        keyboard = None
    else:
        text = f"üëâ –•–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ {game['player_turn']}"

    sent_message = bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=keyboard
    )
    game['message_id'] = sent_message.message_id


def get_bot_move(board):
    for i in range(9):
        if board[i] == ' ':
            temp_board = board[:]
            temp_board[i] = '‚≠ï'
            if check_winner(temp_board) == '‚≠ï':
                return i
    for i in range(9):
        if board[i] == ' ':
            temp_board = board[:]
            temp_board[i] = '‚ùå'
            if check_winner(temp_board) == '‚ùå':
                return i
    available_moves = [i for i, x in enumerate(board) if x == ' ']
    if available_moves:
        return random.choice(available_moves)
    return None


def create_admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton('/start'),
        types.KeyboardButton('/newgame'),
        types.KeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'),
        types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç'),
    ]
    keyboard.add(*buttons)
    return keyboard


def create_start_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    return keyboard


def create_menu_keyboard():  # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton('/newgame'),
        types.KeyboardButton('üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É'),
        types.KeyboardButton('/stats'),
    )
    keyboard.add(
        types.KeyboardButton('–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'),
        types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç'),
    )
    return keyboard



greetings = [
    "üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ —Å—ã–≥—Ä–∞—Ç—å –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°—ã–≥—Ä–∞–µ–º –ø–∞—Ä—Ç–∏—é? –ù–∞—á–Ω–∏ –∏–≥—Ä—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
    "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
    "üïπÔ∏è –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ? –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
]


@bot.message_handler(commands=['start'])
def start_handler(message):
    if message.chat.id == 123456789:
        bot.send_message(message.chat.id, "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º", reply_markup=create_admin_keyboard())
    else:
        greeting = random.choice(greetings)
        bot.send_message(message.chat.id, greeting, reply_markup=create_menu_keyboard())


    bot.set_my_commands([
        telebot.types.BotCommand("/start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
        telebot.types.BotCommand("/newgame", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
        telebot.types.BotCommand("/stats", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    ])


@bot.message_handler(commands=['stats'])
def stats_handler(message):
    user_id = message.from_user.id
    if user_id in user_stats:
        wins = user_stats[user_id].get('wins', 0)
        losses = user_stats[user_id].get('losses', 0)
        draws = user_stats[user_id].get('draws', 0)
        bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–±–µ–¥: {wins}\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n–ù–∏—á—å–∏—Ö: {draws}",
                         reply_markup=create_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", reply_markup=create_menu_keyboard())


@bot.message_handler(func=lambda message: message.text == '–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
def reset_data(message):
    if message.chat.id == 123456789:
        games.clear()
        user_stats.clear()  # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")
    else:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@bot.message_handler(func=lambda message: message.text == "üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
def new_game_from_keyboard_handler(message):
    new_game_handler(message)


def delete_start_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã: {e}")


@bot.message_handler(commands=['newgame'])
def new_game_handler(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if chat_id in games:
        bot.send_message(chat_id,
                         "‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –î–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞—á–Ω–∏ –Ω–æ–≤—É—é –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ.")
    else:
        if chat_id in games and games[chat_id]['welcome_message_id']:
            try:
                bot.delete_message(chat_id, games[chat_id]['welcome_message_id'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            games[chat_id]['welcome_message_id'] = None

        message_text = start_new_game(chat_id, user_id)
        sent_message = bot.send_message(chat_id, message_text)

        update_board_message(chat_id)


        threading.Timer(3.0, delete_start_message, args=[chat_id, sent_message.message_id]).start()


@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç')
def clear_messages_handler(message):
    if message.chat.id == 123456789:
        chat_id = message.chat.id
        clear_chat_messages(chat_id)
        bot.send_message(chat_id, "üßπ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.", reply_markup=create_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=create_menu_keyboard())


def bot_move_with_delay(chat_id, board):
    time.sleep(1)
    game = games.get(chat_id)
    if game and game['status'] == 'playing':
        bot_move = get_bot_move(board)
        if bot_move is not None:
            board[bot_move] = '‚≠ï'
            winner = check_winner(board)
            if winner:
                if not game['winner_message_sent']:
                    game['winner_message_sent'] = True
                    update_board_message(chat_id)
                    user_id = game['player']
                    if user_id not in user_stats:
                        user_stats[user_id] = {'wins': 0, 'losses': 0, 'draws': 0}
                    if winner == 'draw':
                        user_stats[user_id]['draws'] = user_stats[user_id].get('draws', 0) + 1
                        bot.send_message(chat_id, "ü§ù –ù–∏—á—å—è! –•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!", reply_markup=create_menu_keyboard())
                    else:
                        user_stats[user_id]['losses'] = user_stats[user_id].get('losses', 0) + 1
                        bot.send_message(chat_id, f"üéâ –ü–æ–±–µ–¥–∏–ª –±–æ—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üéâ",
                                         reply_markup=create_menu_keyboard())
                    delete_old_messages(chat_id)
                    del games[chat_id]
                    return
            else:

                game['player_turn'] = '‚ùå'
                update_board_message(chat_id)
        else:
            if not game['winner_message_sent']:
                game['winner_message_sent'] = True
                update_board_message(chat_id)
                user_id = game['player']
                if user_id not in user_stats:
                    user_stats[user_id] = {'wins': 0, 'losses': 0, 'draws': 0}
                user_stats[user_id]['draws'] = user_stats[user_id].get('draws', 0) + 1
                bot.send_message(chat_id, "ü§ù –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∏—á—å–µ–π.", reply_markup=create_menu_keyboard())
                delete_old_messages(chat_id)
                del games[chat_id]


@bot.callback_query_handler(func=lambda call: call.data.startswith('move_'))
def move_handler(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    if chat_id not in games or games[chat_id]['status'] != 'playing':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã")
        return
    game = games[chat_id]
    if user_id != game['player']:
        bot.answer_callback_query(call.id, "‚õî –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã.")
        return
    if game['player_turn'] != '‚ùå' and game['player_turn'] != '‚≠ï':
        bot.answer_callback_query(call.id, "ü§î –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return

    move = int(call.data.split('_')[1])
    board = game['board']

    if board[move] == ' ':
        board[move] = game['player_turn']

        winner = check_winner(board)
        if winner:
            if not game['winner_message_sent']:
                game['winner_message_sent'] = True
                update_board_message(chat_id)
                user_id = game['player']
                if user_id not in user_stats:
                    user_stats[user_id] = {'wins': 0, 'losses': 0, 'draws': 0}
                if winner == 'draw':
                    user_stats[user_id]['draws'] = user_stats[user_id].get('draws', 0) + 1
                    bot.send_message(chat_id, "ü§ù –ù–∏—á—å—è! –•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!", reply_markup=create_menu_keyboard())
                else:
                    user_stats[user_id]['wins'] = user_stats[user_id].get('wins', 0) + 1
                    bot.send_message(chat_id, f"üéâ –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {winner}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ",
                                     reply_markup=create_menu_keyboard())
                delete_old_messages(chat_id)
                del games[chat_id]
            return


        game['player_turn'] = '‚≠ï'
        update_board_message(chat_id)


        threading.Thread(target=bot_move_with_delay, args=[chat_id, board]).start()

    else:
        bot.answer_callback_query(call.id, "üö´ –ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é!")


@bot.callback_query_handler(func=lambda call: call.data == 'stop_game')
def stop_game_handler(call):
    chat_id = call.message.chat.id
    if chat_id in games:
        del games[chat_id]
        bot.send_message(chat_id, "üõë –ò–≥—Ä–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.", reply_markup=create_menu_keyboard())
        delete_old_messages(chat_id)
    else:
        bot.answer_callback_query(call.id, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")


if __name__ == '__main__':
    bot.polling(none_stop=True)